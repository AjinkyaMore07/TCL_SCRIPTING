for Loop in Tcl

The for loop in Tcl is used to execute a block of code multiple times with a controlled iteration. It is commonly used in physical design engineering (ASIC) to automate tasks such as iterating over clock groups, cell instances, metal layers, etc.
Syntax

for {initialization} {condition} {increment} {
    # Code block to execute
}

    initialization: Sets up the loop variable.
    condition: The loop runs while this condition is true.
    increment: Updates the loop variable after each iteration.

Basic Example

for {set i 1} {$i <= 5} {incr i} {
    puts "Iteration: $i"
}

Output:

Iteration: 1
Iteration: 2
Iteration: 3
Iteration: 4
Iteration: 5

Physical Design Engineering Use Cases
1. Looping Through Metal Layers in Routing

In routing, we might need to iterate through different metal layers.

set metal_layers {M1 M2 M3 M4 M5 M6}

for {set i 0} {$i < [llength $metal_layers]} {incr i} {
    set layer [lindex $metal_layers $i]
    puts "Processing metal layer: $layer"
}

Output:

Processing metal layer: M1
Processing metal layer: M2
Processing metal layer: M3
Processing metal layer: M4
Processing metal layer: M5
Processing metal layer: M6

2. Iterating Over Clock Groups in Timing Analysis

When working with clock groups, we may need to apply constraints iteratively.

set clocks {clk1 clk2 clk3 clk4}

for {set i 0} {$i < [llength $clocks]} {incr i} {
    set clk [lindex $clocks $i]
    puts "Setting false path for clock: $clk"
    # Example: setting false path in Synopsys Primetime
    # report_timing -from $clk -to [get_clocks *] -max_paths 10
}

Output:

Setting false path for clock: clk1
Setting false path for clock: clk2
Setting false path for clock: clk3
Setting false path for clock: clk4

3. Iterating Over Instances for Placement Checks

During placement, checking a subset of standard cells.

set cell_list {U1 U2 U3 U4 U5}

for {set i 0} {$i < [llength $cell_list]} {incr i} {
    set cell [lindex $cell_list $i]
    puts "Checking placement of cell: $cell"
    # Example: checking if a cell is placed properly
    # puts [get_property [get_cells $cell] location]
}

Output:

Checking placement of cell: U1
Checking placement of cell: U2
Checking placement of cell: U3
Checking placement of cell: U4
Checking placement of cell: U5

4. Automating Power Analysis for Voltage Corners

If we have different voltage corners, we can loop through them for analysis.

set corners {1.2V 1.0V 0.8V}

for {set i 0} {$i < [llength $corners]} {incr i} {
    set corner [lindex $corners $i]
    puts "Running power analysis for $corner"
    # Example: run power analysis for each voltage corner
    # run_power_analysis -corner $corner
}

Output:

Running power analysis for 1.2V
Running power analysis for 1.0V
Running power analysis for 0.8V

5. Running Multiple Placement Trials

When tuning placement parameters, multiple trials can be run in a loop.

for {set density 50} {$density <= 80} {incr density 10} {
    puts "Running placement with density: $density%"
    # Example: running placement with different densities
    # place_design -density $density
}

Output:

Running placement with density: 50%
Running placement with density: 60%
Running placement with density: 70%
Running placement with density: 80%

6. Checking Setup & Hold Violations Across Multiple Paths

set paths {path1 path2 path3 path4}

for {set i 0} {$i < [llength $paths]} {incr i} {
    set path [lindex $paths $i]
    puts "Checking timing violations for: $path"
    # Example: run setup and hold analysis
    # report_timing -path $path -setup
    # report_timing -path $path -hold
}

Output:

Checking timing violations for: path1
Checking timing violations for: path2
Checking timing violations for: path3
Checking timing violations for: path4

Nested for Loops for Multi-Dimensional Iteration

When checking clock-to-clock paths, a nested loop may be used.

set src_clocks {clkA clkB clkC}
set dst_clocks {clkX clkY}

for {set i 0} {$i < [llength $src_clocks]} {incr i} {
    for {set j 0} {$j < [llength $dst_clocks]} {incr j} {
        set src [lindex $src_clocks $i]
        set dst [lindex $dst_clocks $j]
        puts "Analyzing timing from $src to $dst"
        # report_timing -from $src -to $dst
    }
}

Output:

Analyzing timing from clkA to clkX
Analyzing timing from clkA to clkY
Analyzing timing from clkB to clkX
Analyzing timing from clkB to clkY
Analyzing timing from clkC to clkX
Analyzing timing from clkC to clkY

Key Takeaways

✔️ for loops are essential for automating repetitive tasks in ASIC physical design.
✔️ They are commonly used for iterating over metal layers, voltage corners, cell instances, clock domains, and timing paths.
✔️ Using nested loops can help analyze multi-dimensional constraints (e.g., clock-to-clock analysis).
